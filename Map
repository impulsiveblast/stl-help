#include<bits/stdc++.h>
using namespace std;
 
 void print(map<int,string> m)
 {
     for(auto p:m)                                        //here p copies value from m
     {
         cout<<p.first<<" "<<p.second<<endl; 
     }
     
     cout<<endl;
 }
 
 int main()
{
    
             //MAPS
             
             //  for any particular key a value can be stored its just a mapping from a key to its value 
            //both can be of same or diffrent data types   similar to maping of maths
            //data is stored in sorted order of keys map<a,b>  mapping from a(key) datatype to b(value) datatype
 map<int,string> m;
 
 m[1]="abc";    //o(logn)
 m[2]="bcd";
 m[3]="asd";
 m[4];   //no elements inserted means an empty string has got inserted
 map<int,string> ::iterator it=m.begin();


//  if map<string,string> m1
//  m["absd"]="abbsdk"; string size*o(logn)

 for(it=m.begin();it!=m.end();it++)
 {
     cout<<(*it).first<<" "<<(*it).second<<endl;
 }
 
 
 
//  print(m);                        //can be printed via this meathod as well
 
 
//  for(auto i:m)
//  {
//      cout<<i.first<<" "<<i.second<<endl;             //this can also be used to print values
//  }
//  //incase of map<string,b> b can be any datatype then values will get printed in lexiographical order i.e like they appear in dictionary
   
 
//  find()  :used to find address corresponding to that key

auto t=m.find(3);    //o(logn)

if(t==m.end())
{
    cout<<"Empty value";
}
else
{
    cout<<(*t).first<<" "<<(*t).second;
}

m.erase(3)               //erases the key 3 and value associated with it 
 //itrator or key any one of them can be inserted inside m.erase

// auto t2=m.find(3);

// m.erase(t2);

print(m);

// in strings question unordered_maps can be used as its time complexity is very low....
// declaration:unordered_map<a,b> m; where a nad b are same or diffrent datatypes
//insertion in case of unordered maps:O(1)
//traversal of unordered map is exactly same as ordered map


   
   return 0;
} 
