// vector commands
vector<data_structure>v;
// for e.g vector<pair<int,int>>v,vector<struct_name>v;
v.push_back(ele)
// inserting element at the end
v.pop_back()
// deleting element from end;
sort(v.begin(),v.end());
sort(arr,arr+n)
sort(v.begin(),v.end(),greater<data_structure>());

// for eg there is a vector of structure;
bool comp(struct_name e1,struct_name e2){
int avg1 =( e1.maths+e1.saskrit+e1.hindi)/3;
int avg2 = ( e2.maths+e2.saskrit+e2.hindi)/3;
return avg1>avg2;
}

sort(v.begin(),v.end(),comp);
// lower_bound and upper_bound in vector

#include <algorithm> // for lower_bound, upper_bound and sort
#include <iostream>
#include <vector> // for vector

using namespace std;

/*int main()
{
	int gfg[] = { 5, 6, 7, 7, 6, 5, 5, 6 };

	vector<int> v(gfg, gfg + 8); 
	sort(v.begin(), v.end()); 	
  vector<int>::iterator lower, upper;
	lower = lower_bound(v.begin(), v.end(), 6);
	upper = upper_bound(v.begin(), v.end(), 6);

	cout << "lower_bound for 6 at position "
		<< (lower - v.begin() + 1) << '\n';
	cout << "upper_bound for 6 at position "
		<< (upper - v.begin() + 1) << '\n';

	return 0;
}*/
